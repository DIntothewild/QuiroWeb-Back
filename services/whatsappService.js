// services/whatsappService.js
const twilio = require("twilio");
const { logSuccess, logError, logWarning } = require("../services/logger");

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const twilioPhoneNumber = `whatsapp:${
  process.env.TWILIO_WHATSAPP_NUMBER || "+14155238886"
}`;

// Verificar que las credenciales est√©n configuradas
if (!accountSid || !authToken) {
  logWarning("‚ö†Ô∏è Credenciales de Twilio no configuradas correctamente");
}

const client = twilio(accountSid, authToken);

// üì¶ Funci√≥n principal
async function sendWhatsAppMessage(booking, templateType = "confirmation") {
  if (!booking || typeof booking !== "object") {
    logError("‚ùå No se recibi√≥ un objeto de reserva v√°lido.");
    return;
  }

  const { customerName, terapiasType, phoneNumber, dateTime, date, time } =
    booking;

  // Comprobar que todos los campos necesarios existen
  if (!customerName || !terapiasType || !phoneNumber) {
    logError("‚ùå Faltan datos necesarios en la reserva:", booking);
    return;
  }

  // Determinar la fecha y hora correctamente
  const fullDateTime = dateTime || (date && time ? `${date} ${time}` : null);
  if (!fullDateTime) {
    logError("‚ùå No se pudo determinar la fecha y hora de la reserva");
    return;
  }

  // Limpiar y formatear el n√∫mero de tel√©fono correctamente
  let cleanPhone = phoneNumber.replace(/\D/g, "");
  // Asegurar que el n√∫mero comienza con el c√≥digo de pa√≠s
  const fullPhone = cleanPhone.startsWith("34")
    ? cleanPhone
    : `34${cleanPhone}`;

  console.log("üìû Enviando WhatsApp a:", {
    numero_original: phoneNumber,
    numero_limpio: cleanPhone,
    numero_completo: `+${fullPhone}`,
  });

  // Extraer fecha y hora
  const [fecha, hora] = fullDateTime.split(" ");
  if (!fecha || !hora) {
    logError("‚ùå El formato de dateTime es incorrecto:", fullDateTime);
    return;
  }

  try {
    // Soluci√≥n temporal: Env√≠a un mensaje de texto simple mientras la plantilla se aprueba
    // Esto utilizar√° el m√©todo body en lugar de contentSid y contentVariables
    const messageText = `¬°Hola ${customerName}! üëã\n\nTu reserva de *${terapiasType}* ha sido confirmada ‚úÖ\n\nüìÖ Fecha: ${fecha}\n‚è∞ Hora: ${hora}\n\nSi necesitas cancelar o cambiar tu cita, por favor cont√°ctanos.\n\n¬°Gracias por confiar en Wellness Flow üåø`;

    const res = await client.messages.create({
      from: twilioPhoneNumber,
      to: `whatsapp:+${fullPhone}`,
      body: messageText,
    });

    logSuccess(
      `üì≤ Mensaje WhatsApp (${templateType}) enviado a +${fullPhone} (SID: ${res.sid})`
    );

    return res.sid;
  } catch (error) {
    logError(
      `‚ùå Error enviando WhatsApp (${templateType}) a +${fullPhone}: ${error.message}`
    );

    // Registrar m√°s detalles sobre el error
    if (error.code) {
      logError(`C√≥digo de error Twilio: ${error.code}`);
    }
    if (error.moreInfo) {
      logError(`M√°s informaci√≥n: ${error.moreInfo}`);
    }

    // Implementar soluci√≥n alternativa: enviar sin contentSid como fallback
    try {
      logWarning("‚ö†Ô∏è Intentando enviar mensaje usando m√©todo alternativo...");

      // Crear mensaje de texto simple como respaldo
      const fallbackMessage = `¬°Hola ${customerName}! Tu reserva de ${terapiasType} para el ${fecha} a las ${hora} ha sido confirmada. Gracias por confiar en Wellness Flow.`;

      const fallbackRes = await client.messages.create({
        from: twilioPhoneNumber,
        to: `whatsapp:+${fullPhone}`,
        body: fallbackMessage,
      });

      logSuccess(
        `üì≤ Mensaje WhatsApp (fallback) enviado a +${fullPhone} (SID: ${fallbackRes.sid})`
      );
      return fallbackRes.sid;
    } catch (fallbackError) {
      logError(
        `‚ùå Error enviando WhatsApp (fallback) a +${fullPhone}: ${fallbackError.message}`
      );
      throw error; // Lanzar el error original
    }
  }
}

// Funci√≥n adicional para usar cuando se apruebe la plantilla
async function sendWhatsAppWithTemplate(
  booking,
  templateType = "confirmation"
) {
  if (!booking || typeof booking !== "object") {
    logError("‚ùå No se recibi√≥ un objeto de reserva v√°lido.");
    return;
  }

  const { customerName, terapiasType, phoneNumber, dateTime, date, time } =
    booking;

  // Comprobar todos los campos necesarios
  if (!customerName || !terapiasType || !phoneNumber) {
    logError("‚ùå Faltan datos necesarios en la reserva:", booking);
    return;
  }

  const fullDateTime = dateTime || (date && time ? `${date} ${time}` : null);
  if (!fullDateTime) {
    logError("‚ùå No se pudo determinar la fecha y hora de la reserva");
    return;
  }

  let cleanPhone = phoneNumber.replace(/\D/g, "");
  const fullPhone = cleanPhone.startsWith("34")
    ? cleanPhone
    : `34${cleanPhone}`;

  // Extraer fecha y hora
  const [fecha, hora] = fullDateTime.split(" ");
  if (!fecha || !hora) {
    logError("‚ùå El formato de dateTime es incorrecto:", fullDateTime);
    return;
  }

  try {
    // Usar la plantilla una vez aprobada
    const res = await client.messages.create({
      from: twilioPhoneNumber,
      to: `whatsapp:+${fullPhone}`,
      contentSid:
        process.env.TWILIO_CONTENT_SID || "HX0c9f3a05634a57e2805db0f4ef8d1f2",
      contentVariables: JSON.stringify({
        1: customerName,
        2: terapiasType,
        3: fecha,
        4: hora,
      }),
    });

    logSuccess(
      `üì≤ Mensaje WhatsApp con plantilla (${templateType}) enviado a +${fullPhone} (SID: ${res.sid})`
    );

    return res.sid;
  } catch (error) {
    logError(
      `‚ùå Error enviando WhatsApp con plantilla (${templateType}) a +${fullPhone}: ${error.message}`
    );
    throw error;
  }
}

module.exports = {
  sendWhatsAppMessage,
  sendWhatsAppWithTemplate,
};
